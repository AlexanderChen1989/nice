Compiling 1 file (.ex)

defmodule Nice.ConnectQuery do
  alias Nice.{Repo, PigToCow, Cow, Pig, OwnerToCat, Cat, Owner}
  alias Ecto.Multi
  import Ecto.Query

  defp create_cat(%{owner: _}, cat_params) do
    %Cat{}
    |> Cat.changeset(cat_params)
    |> Repo.insert
  end

  defp create_cow(%{pig: _}, cow_params) do
    %Cow{}
    |> Cow.changeset(cow_params)
    |> Repo.insert
  end

  defp create_owner_to_cat(%{cat: cat, owner: owner}) do
    %OwnerToCat{cat: cat, owner: owner}
    |> Repo.insert
  end

  defp create_pig_to_cow(%{cow: cow, pig: pig}) do
    %PigToCow{cow: cow, pig: pig}
    |> Repo.insert
  end

  defp get_owner(_changes, owner_id) do
    case Repo.get(Owner, owner_id) do
      nil -> {:error, "Owner not found"}
      owner -> {:ok, owner}
    end
  end

  defp get_cat(_changes, cat_id) do
    case Repo.get(Cat, cat_id) do
      nil -> {:error, "Cat not found"}
      cat -> {:ok, cat}
    end
  end

  defp get_pig(_changes, pig_id) do
    case Repo.get(Pig, pig_id) do
      nil -> {:error, "Pig not found"}
      pig -> {:ok, pig}
    end
  end

  defp get_cow(_changes, cow_id) do
    case Repo.get(Cow, cow_id) do
      nil -> {:error, "Cow not found"}
      cow -> {:ok, cow}
    end
  end

  def owner_add_cat(owner_id, cat_params) do
    Multi.new
    |> Multi.run(:owner, &get_owner(&1, owner_id))
    |> Multi.run(:cat, &create_cat(&1, cat_params))
    |> Multi.run(:owner_to_cat, &create_owner_to_cat(&1))
    |> Repo.transaction()
    |> case do
      {:ok, changes} -> {:ok, changes.cat}
      {:error, :cat, changeset, _} -> {:error, changeset.errors}
      {:error, :owner_to_cat, changeset, _} -> {:error, changeset.errors}
      {:error, _, reason, _} -> {:error, reason}
      {:error, reason} -> {:error, reason}
    end
  end

  def owner_connect_cat(owner_id, cat_id) do
    Multi.new
    |> Multi.run(:owner, &get_owner(&1, owner_id))
    |> Multi.run(:cat, &get_cat(&1, cat_id))
    |> Multi.run(:owner_to_cat, &create_owner_to_cat(&1))
    |> Repo.transaction()
    |> case do
      {:ok, changes} -> {:ok, changes.cat}
      {:error, :cat, changeset, _} -> {:error, changeset.errors}
      {:error, :owner_to_cat, changeset, _} -> {:error, changeset.errors}
      {:error, _, reason, _} -> {:error, reason}
      {:error, reason} -> {:error, reason}
    end
  end

  def owner_del_cat(owner_id, cat_id) do
    query =
      from owner_to_cat in OwnerToCat,
        where: [owner_id: ^owner_id, cat_id: ^cat_id]

    {num, _} =  Repo.delete_all(query)
    {:ok, num}
  end

  def owner_with_cats(owner_id) do
    query =
      from owner in Owner,
        where: [id: ^owner_id],
        preload: :cats

    case Repo.one(query) do
      nil -> {:error, "Owner not found"}
      owner -> {:ok, owner}
    end
  end

  def pig_add_cow(pig_id, cow_params) do
    Multi.new
    |> Multi.run(:pig, &get_pig(&1, pig_id))
    |> Multi.run(:cow, &create_cow(&1, cow_params))
    |> Multi.run(:pig_to_cow, &create_pig_to_cow(&1))
    |> Repo.transaction()
    |> case do
      {:ok, changes} -> {:ok, changes.cow}
      {:error, :cow, changeset, _} -> {:error, changeset.errors}
      {:error, :pig_to_cow, changeset, _} -> {:error, changeset.errors}
      {:error, _, reason, _} -> {:error, reason}
      {:error, reason} -> {:error, reason}
    end
  end

  def pig_connect_cow(pig_id, cow_id) do
    Multi.new
    |> Multi.run(:pig, &get_pig(&1, pig_id))
    |> Multi.run(:cow, &get_cow(&1, cow_id))
    |> Multi.run(:pig_to_cow, &create_pig_to_cow(&1))
    |> Repo.transaction()
    |> case do
      {:ok, changes} -> {:ok, changes.cow}
      {:error, :cow, changeset, _} -> {:error, changeset.errors}
      {:error, :pig_to_cow, changeset, _} -> {:error, changeset.errors}
      {:error, _, reason, _} -> {:error, reason}
      {:error, reason} -> {:error, reason}
    end
  end

  def pig_del_cow(pig_id, cow_id) do
    query =
      from pig_to_cow in PigToCow,
        where: [pig_id: ^pig_id, cow_id: ^cow_id]

    {num, _} =  Repo.delete_all(query)
    {:ok, num}
  end

  def pig_with_cows(pig_id) do
    query =
      from pig in Pig,
        where: [id: ^pig_id],
        preload: :cows

    case Repo.one(query) do
      nil -> {:error, "Pig not found"}
      pig -> {:ok, pig}
    end
  end

end
    
